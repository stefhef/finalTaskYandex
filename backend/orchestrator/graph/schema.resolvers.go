package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"errors"
	"log"

	"githgub.com/stefhef/finalTaskYandex/orchestrator/database"
	"githgub.com/stefhef/finalTaskYandex/orchestrator/graph/model"
)

// GetUser is the resolver for the GetUser field.
func (r *mutationResolver) GetUser(ctx context.Context, username *string, password *string) (*string, error) {
	log.Printf("Запрос на получение токена %s", *username)
	access_token, err := database.GetUser(*username, *password)
	return &access_token, err
}

// Register is the resolver for the Register field.
func (r *mutationResolver) Register(ctx context.Context, username *string, password *string) (*string, error) {
	log.Printf("Запрос регистрации: %s %s", *username, *password)
	access_token, err := database.AddUser(*username, *password)
	return &access_token, err
}

// AddExpression is the resolver for the AddExpression field.
func (r *mutationResolver) AddExpression(ctx context.Context, text *string, accessToken *string) (*model.Expression, error) {
	log.Printf("Запрос на добавление выражения %s от %s", *text, *accessToken)
	exp, err := database.AddExpression(*text, *accessToken)
	return exp, err
}

// Expressions is the resolver for the Expressions field.
func (r *queryResolver) Expressions(ctx context.Context, limit *int, offset *int, accessToken *string) ([]*model.Expression, error) {
	log.Printf("Запрос на получение выражений %s", *accessToken)
	if len(*accessToken) == 0 {
		return nil, errors.New("не авторизован")
	}
	Expressions, err := database.GetAllExpressions(*accessToken)
	return Expressions, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
